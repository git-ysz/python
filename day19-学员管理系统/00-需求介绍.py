"""
综合实践项目（面向对象版学员管理系统）：
目标：
    1、了解面向对象开发过程中类内部功能的分析方法
    2、了解常用系统功能
        1.添加
        2.删除
        3.修改
        4.查询
一、系统需求：
使用面向对象编程思想完成学员管理系统的开发，具体如下：
系统要求：
    学员数据储存在文件中
系统功能：
    添加学员；删除学员；修改学员信息；查询学员信息；显示所有学员信息；保存学员信息；退出系统等功能。。。

二、准备程序文件
2.1、分析
    1.角色分析：学员；管理系统
注意事项：
    1.为了方便维护代码，一般一个角色一个程序文件；
    2.项目要有主程序入口，习惯为 "main.py"
2.2、创建程序文件
    1.创建项目目录，例如：StudentManagerSystem
    2.程序入口文件：main.py
    3.学员文件：student.py
    4.管理系统文件（管理员）：managerSystem.py

三、书写程序
3.1、student.py
    需求：
        1.学员信息包括：姓名，性别手机号；
        2.添加__str__魔法方法，方便查看学员对象信息
    书写代码...详见文件
3.2、managerSystem.py
    需求：系统功能循环使用，用户输入不同的功能序号执行不同的功能
        1.储存数据的位置：文件（student.data）
            加载文件数据
            修改数据后保存到文件
        2.储存数据的形式：列表储存学员对象
        3.系统功能
            添加学员
            删除学员
            修改学员
            查询学员
            显示所有学员信息
            保存学员信息
    步骤：
        1.定义程序入口函数 run()
            加载数据 load_student()
            显示功能菜单
            用户输入功能序号
            根据用户输入的功能序号执行不同的功能
        2.定义系统功能函数，添加删除学员等
3.3、main.py
    引入managerSystem包，启动管理系统

3.4、定义系统功能函数
3.4.1、添加学员功能
    需求：用户输入学员姓名、性别、手机号，将学员添加到系统(不包括保存到文件)
    步骤：
        1.用户输入姓名、性别、手机号
        2.创建该学员对象
        3.将该学员对象添加到列表

3.4.2、删除学员功能
    需求：用户输入学员姓名，如果学员存在，则删除该学员
    步骤：
        1.用户输入学员姓名
        2.遍历学员数据列表，如果用户输入的学员存在则删除，否则则提示该学员不存在

3.4.3、修改学员功能
    需求：用户输入学员姓名，如果学员存在，则修改该学员信息
    步骤：
        1.用户输入学员姓名
        2.遍历学员数据列表，如果用户输入的学员存在则修改，否则则提示该学员不存在

3.4.4、查询学员功能
    需求：用户输入学员姓名，如果学员存在，则打印该学员信息
    步骤：
        1.用户输入学员姓名
        2.遍历学员数据列表，如果用户输入的学员存在则打印学员信息，否则则提示该学员不存在

3.4.5、显示所有学员功能
    需求：打印所有学员信息
    步骤：
        1.遍历学员数据列表，打印学员信息

3.4.6、保存学员信息功能
    需求：将修改后的学员数据保存到储存数据的文件
    步骤：
        1.打开文件
        2.文件写入数据
        3.关闭文件
    思考：
        1.文件写入的数据是学员对象的内存地址么？
        2.文件内数据要求的数据类型是什么

    · 拓展 __dict__

3.4.7、从文件加载学员信息功能
    需求：每次进入系统后，修改的数据都是文件里面的数据
    步骤：
        1.尝试以‘r’模式打开学员数据文件，如果文件不存在则以‘w’模式打开文件
        2.如果文件存在则读取数据冰储存数据
            读取数据
            转换数据类型为列表并转换列表内的字典为对象
            储存学员数据到学员列表
        3.关闭文件

"""

# 拓展 __dict__


class A(object):
    a = 0

    def __init__(self):
        self.b = 1

    def __str__(self):
        return f'{self.b}'


aa = A()
print(A.__dict__)
print(aa.__dict__)  # {'b': 1}
